def Main():
        
    # Importing the Libraries
#    import win32com.client
#    import sys
    import subprocess
    
#   получить имя пользователя для создания нужных папок
    import getpass
    sys_user = getpass.getuser()
    
    from pathlib import Path
    Path("C:/Users/" + sys_user + "/python_SAP_scripting/cooispi_current_report").mkdir(parents=True, exist_ok=True)
    Path("C:/Users/" + sys_user +"/python_SAP_scripting/cooispi_forecast_history").mkdir(parents=True, exist_ok=True)
    
    # если файл с выгрузкой есть, удаляем его, перед тем, как SAP запишет новый
    import os
    myfile="C:/Users/" + sys_user +"/python_SAP_scripting/cooispi_current_report/export_cooispi.xlsx"

    ## если файл существует, удаляем его ##
    if os.path.isfile(myfile):
        os.remove(myfile)
    
    
    import pandas as pd
    # загружаем файл с параметрами по тразакции    
    df_transaction_info = pd.read_excel('C:/Users/' + sys_user + '/python_SAP_scripting/template_MB51.xlsm',  header=None)
    df_transaction_info = df_transaction_info.fillna('') 
    
    # список тэгов
    tag_list = ['okcd', # id транзакции
                'PPIO_LISTTYP").key', #список
                'ALV_VARIANT").text',  # выбранный layout
                'ctxtS_WERKS-LOW").text', # завод изготовитель
                'ctxtS_ECKST-LOW").text', # дата начала периода
                'ctxtS_ECKST-HIGH").text', # дата конца периода
                'ctxtDY_PATH").text', # путь к папке
                'ctxtDY_FILENAME").text'] # название файла
    
    # преобразуем даты в текстовый формат
    #df_transaction_info.loc[1:3,1] = df_transaction_info.loc[1:3,1].to_string()
    df_transaction_info.loc[11,1]= str(df_transaction_info.loc[11,1])
    df_transaction_info.loc[12,1]= str(df_transaction_info.loc[12,1])
    df_transaction_info.loc[13,1]= str(df_transaction_info.loc[13,1])
    
    
    df_transaction_info.loc[15,1]= df_transaction_info.loc[15,1].strftime('%d.%m.%Y')
    df_transaction_info.loc[16,1] =df_transaction_info.loc[16,1].strftime('%d.%m.%Y')
    
    # создаем "словарь" с названиями полей и значениями, добавив также неизменяемые путь файла к папке и название файла
    path = r"C:\Users\Maxim.Smirnov\python_SAP_scripting\cooispi_current_report" + "\\ ".strip()
    
    path = path.replace('Maxim.Smirnov', sys_user)
    
    transaction_val_list = list(df_transaction_info.iloc[11:17,1]) + [path, 'export_cooispi.xlsx' ]
    dict_transaction_info = dict(zip(tag_list, transaction_val_list))
    

         
    
    with open('C:\\Users\\' + sys_user+  '\\python_SAP_scripting\\script_cooispi_vba.vbs') as f:
        lines = f.readlines()
                            
    for tag in list (dict_transaction_info.keys())    :
            
        for i in range (0, len(lines)):
            tag_id = tag
            tag_value = dict_transaction_info.get(tag) 
            
            if lines[i].find(tag_id) == -1:
                continue
            else:
                eq_sign= lines[i].find('=')
                # print (i)
                # print (lines[i].find(tag))
                lines[i] = "".join((lines[i][:eq_sign+3],tag_value, '"'))
                
    # убираем пустые строки ("костыль")    
    lines2 = [a for a in lines if a != '\n']    
    with open('C:\\Users\\'+ sys_user + '\python_SAP_scripting\\script_cooispi_vba.vbs', "w") as f:
        for item in lines2:
            f.write("%s\n" % item)
            
    subprocess.call(['cscript.exe', 'C:\\Users\\' +sys_user + '\\python_SAP_scripting\\script_cooispi_vba.vbs'])   
    #p.wait() 
    
    import os
    import shutil
    import datetime
    from datetime import datetime
    
    now = datetime.now().isocalendar()[1]
   
    
    src_dir="C:/Users/" + sys_user+ "/python_SAP_scripting/cooispi_current_report/export_cooispi.xlsx"
    dst_dir="C:/Users/" + sys_user+ "/python_SAP_scripting/cooispi_forecast_history/cooispi_w"+str(now)+'_'+ datetime.today().strftime('%A')+".xlsx"
    shutil.copy(src_dir,dst_dir)

#-Main------------------------------------------------------------------
if __name__ == "__main__":
  Main()
